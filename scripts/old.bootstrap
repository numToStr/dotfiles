#!/bin/sh
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

# set -e

echo ''

# info() {
# 	# shellcheck disable=SC2059
# 	printf "\r  [ \033[00;34m..\033[0m ] $1\n"
# }
#
# user() {
# 	# shellcheck disable=SC2059
# 	printf "\r  [ \033[0;33m??\033[0m ] $1\n"
# }
#
# success() {
# 	# shellcheck disable=SC2059
# 	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
# }
#
# fail() {
# 	# shellcheck disable=SC2059
# 	printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
# 	echo ''
# 	exit
# }

MARK="❯❯"

info() {
	echo "[ INFO ] $MARK $1"
}

success() {
	echo "[ SUCCESS ] $MARK $1"
}

fail() {
	echo "[ FAIL ] $MARK $1"
}

# ❯
setup_gitconfig() {
	echo "[ SETUP ] $MARK Git Config"
	echo ""
	# if there is no user.email, we'll assume it's a new machine/setup and ask it
	if [ -z "$(git config --global --get user.email)" ]; then
		# user ' - What is your github author name?'
		read -p "$MARK What is your github author name? " -r user_name
		# user ' - What is your github author email?'
		read -p "$MARK What is your github author email? " -r user_email
		# read -r user_email

		git config --global user.name "$user_name"
		git config --global user.email "$user_email"
	elif [ "$(git config --global --get dotfiles.managed)" != "true" ]; then
		# if user.email exists, let's check for dotfiles.managed config. If it is
		# not true, we'll backup the gitconfig file and set previous user.email and
		# user.name in the new one
		user_name="$(git config --global --get user.name)"
		user_email="$(git config --global --get user.email)"
		mv ~/.gitconfig ~/.gitconfig.backup
		# success "moved ~/.gitconfig to ~/.gitconfig.backup"
		info "Moved ~/.gitconfig to ~/.gitconfig.backup"
		git config --global user.name "$user_name"
		git config --global user.email "$user_email"
	else
		# otherwise this gitconfig was already made by the dotfiles
		info "Already managed by Dotfiles"
	fi
	# include the gitconfig.local file
	# git config --global include.path ~/.gitconfig.local
	# finally make git knows this is a managed config already, preventing later
	# overrides by this script
	git config --global dotfiles.managed true
	success 'Git Config'
}
#
# link_file() {
# 	if [ -e "$2" ]; then
# 		if [ "$(readlink "$2")" = "$1" ]; then
# 			info "Skipped $1"
# 			return 0
# 		else
# 			mv "$2" "$2.backup"
# 			success "Moved $2 to $2.backup"
# 		fi
# 	fi
# 	ln -sf "$1" "$2"
# 	success "Linked $1 to $2"
# }
#
# install_dotfiles() {
# 	info 'installing dotfiles'
# 	find -H "$DOTFILES_ROOT" -maxdepth 3 -name '*.symlink' -not -path '*.git*' |
# 		while read -r src; do
# 			dst="$HOME/.$(basename "${src%.*}")"
# 			link_file "$src" "$dst"
# 		done
# }

find_zsh() {
	if command -v zsh >/dev/null 2>&1 && grep "$(command -v zsh)" /etc/shells >/dev/null; then
		command -v zsh
	else
		echo "/bin/zsh"
	fi
}

setup_gitconfig
# install_dotfiles

info "Installing Dependencies"
if ./bin/dot_update; then
	success "Dependencies installed successfully"
else
	fail "Error installing dependencies"
fi

zsh="$(find_zsh)"
test -z "$TRAVIS_JOB_ID" &&
	test "$(expr "$SHELL" : '.*/\(.*\)')" != "zsh" &&
	command -v chsh >/dev/null 2>&1 &&
	chsh -s "$zsh" &&
	success "Set $("$zsh" --version) at $zsh as your default shell"

echo ''
success 'All installed! Enjoy dofiles.'
